using HRManagementSystem.DAL.Data.Context;
using HRManagementSystem.DAL.Interfaces;
using HRManagementSystem.DAL.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HRManagementSystem.DAL.Repositories
{
    public class OfficialHolidayRepository : IOfficialHolidayRepository
    {
        private readonly HRContext _context;
        public OfficialHolidayRepository(HRContext context)
        {
            _context = context;
        }
        public async Task<int> AddAsync(OfficialHoliday officialHoliday)
        {
             await _context.OfficialHoliday.AddAsync(officialHoliday);
            //return await _context.SaveChangesAsync();
            await _context.SaveChangesAsync();
            return officialHoliday.Id; // Assuming Id is generated by the database
        }

        public async Task<OfficialHoliday> GetByIdAsync(int id)
        {
            var officialHoliday = await _context.OfficialHoliday.FirstOrDefaultAsync(x => x.Id == id);
            if (officialHoliday == null)
            {
                throw new KeyNotFoundException($"OfficialHoliday with ID {id} not found.");
            }
            return officialHoliday;
        }

        public async Task<OfficialHoliday> UpdateAsync(OfficialHoliday officialHoliday)
        {
            var existingHoliday =await GetByIdAsync(officialHoliday.Id);
            if (existingHoliday == null)
            {
                throw new KeyNotFoundException($"OfficialHoliday with ID {officialHoliday.Id} not found.");
            }
            existingHoliday.Name = officialHoliday.Name;
            existingHoliday.Date = officialHoliday.Date;

            _context.Entry(existingHoliday).State = EntityState.Modified;

            await _context.SaveChangesAsync();
            return existingHoliday;
        }
        public async Task<int> DeleteAsync(int id)
        {
            var officialHoliday =await GetByIdAsync(id);
            if (officialHoliday == null)
            {
                throw new KeyNotFoundException($"OfficialHoliday with ID {id} not found.");
            }
            _context.OfficialHoliday.Remove(officialHoliday);
            await _context.SaveChangesAsync();
            return officialHoliday.Id;
        }
        public async Task<IEnumerable<OfficialHoliday>> GetAllAsync()
        {
            return await _context.OfficialHoliday.ToListAsync();
        }

    }
}
